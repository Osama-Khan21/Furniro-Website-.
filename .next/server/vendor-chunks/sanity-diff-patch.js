"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sanity-diff-patch";
exports.ids = ["vendor-chunks/sanity-diff-patch"];
exports.modules = {

/***/ "(ssr)/./node_modules/sanity-diff-patch/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/sanity-diff-patch/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiffError: () => (/* binding */ DiffError),\n/* harmony export */   diffItem: () => (/* binding */ diffItem),\n/* harmony export */   diffPatch: () => (/* binding */ diffPatch)\n/* harmony export */ });\n/* harmony import */ var _sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/diff-match-patch */ \"(ssr)/./node_modules/@sanity/diff-match-patch/dist/index.js\");\n\nconst IS_DOTTABLE_RE = /^[A-Za-z_][A-Za-z0-9_]*$/;\nfunction pathToString(path) {\n  return path.reduce((target, segment, i) => {\n    if (Array.isArray(segment))\n      return `${target}[${segment.join(\":\")}]`;\n    if (isKeyedObject(segment))\n      return `${target}[_key==\"${segment._key}\"]`;\n    if (typeof segment == \"number\")\n      return `${target}[${segment}]`;\n    if (typeof segment == \"string\" && !IS_DOTTABLE_RE.test(segment))\n      return `${target}['${segment}']`;\n    if (typeof segment == \"string\")\n      return `${target}${i === 0 ? \"\" : \".\"}${segment}`;\n    throw new Error(`Unsupported path segment \"${segment}\"`);\n  }, \"\");\n}\nfunction isKeyedObject(obj) {\n  return typeof obj == \"object\" && typeof obj._key == \"string\";\n}\nclass DiffError extends Error {\n  path;\n  value;\n  serializedPath;\n  constructor(message, path, value) {\n    const serializedPath = pathToString(path);\n    super(`${message} (at '${serializedPath}')`), this.path = path, this.serializedPath = serializedPath, this.value = value;\n  }\n}\nconst idPattern = /^[a-z0-9][a-z0-9_.-]+$/i, propPattern = /^[a-zA-Z_][a-zA-Z0-9_-]*$/, propStartPattern = /^[a-z_]/i;\nfunction validateProperty(property, value, path) {\n  if (!propStartPattern.test(property))\n    throw new DiffError(\"Keys must start with a letter (a-z)\", path.concat(property), value);\n  if (!propPattern.test(property))\n    throw new DiffError(\n      \"Keys can only contain letters, numbers and underscores\",\n      path.concat(property),\n      value\n    );\n  if (property === \"_key\" || property === \"_ref\" || property === \"_type\") {\n    if (typeof value != \"string\")\n      throw new DiffError(\"Keys must be strings\", path.concat(property), value);\n    if (!idPattern.test(value))\n      throw new DiffError(\"Invalid key - use less exotic characters\", path.concat(property), value);\n  }\n  return property;\n}\nconst ignoredKeys = [\"_id\", \"_type\", \"_createdAt\", \"_updatedAt\", \"_rev\"], defaultOptions = {\n  hideWarnings: !1,\n  diffMatchPatch: {\n    enabled: !0,\n    // Only use diff-match-patch if target string is longer than this threshold\n    lengthThresholdAbsolute: 30,\n    // Only use generated diff-match-patch if the patch length is less than or equal to\n    // (targetString * relative). Example: A 100 character target with a relative factor\n    // of 1.2 will allow a 120 character diff-match-patch. If larger than this number,\n    // it will fall back to a regular `set` patch.\n    lengthThresholdRelative: 1.2\n  }\n};\nfunction mergeOptions(options) {\n  return {\n    ...defaultOptions,\n    ...options,\n    diffMatchPatch: { ...defaultOptions.diffMatchPatch, ...options.diffMatchPatch || {} }\n  };\n}\nfunction diffPatch(itemA, itemB, opts) {\n  const options = mergeOptions(opts || {}), id = options.id || itemA._id === itemB._id && itemA._id, revisionLocked = options.ifRevisionID, ifRevisionID = typeof revisionLocked == \"boolean\" ? itemA._rev : revisionLocked, basePath = options.basePath || [];\n  if (!id)\n    throw new Error(\n      \"_id on itemA and itemB not present or differs, specify document id the mutations should be applied to\"\n    );\n  if (revisionLocked === !0 && !ifRevisionID)\n    throw new Error(\n      \"`ifRevisionID` is set to `true`, but no `_rev` was passed in item A. Either explicitly set `ifRevisionID` to a revision, or pass `_rev` as part of item A.\"\n    );\n  if (basePath.length === 0 && itemA._type !== itemB._type)\n    throw new Error(`_type is immutable and cannot be changed (${itemA._type} => ${itemB._type})`);\n  const operations = diffItem(itemA, itemB, options, basePath, []);\n  return serializePatches(operations, { id, ifRevisionID: revisionLocked ? ifRevisionID : void 0 });\n}\nfunction diffItem(itemA, itemB, opts = defaultOptions, path = [], patches = []) {\n  if (itemA === itemB)\n    return patches;\n  const aType = Array.isArray(itemA) ? \"array\" : typeof itemA, bType = Array.isArray(itemB) ? \"array\" : typeof itemB, aIsUndefined = aType === \"undefined\", bIsUndefined = bType === \"undefined\";\n  if (aIsUndefined && !bIsUndefined)\n    return patches.push({ op: \"set\", path, value: itemB }), patches;\n  if (!aIsUndefined && bIsUndefined)\n    return patches.push({ op: \"unset\", path }), patches;\n  const options = mergeOptions(opts), dataType = aIsUndefined ? bType : aType;\n  return dataType === \"object\" || dataType === \"array\" ? aType !== bType ? (patches.push({ op: \"set\", path, value: itemB }), patches) : dataType === \"array\" ? diffArray(itemA, itemB, options, path, patches) : diffObject(itemA, itemB, options, path, patches) : diffPrimitive(itemA, itemB, options, path, patches);\n}\nfunction diffObject(itemA, itemB, options, path, patches) {\n  const atRoot = path.length === 0, aKeys = Object.keys(itemA).filter(atRoot ? isNotIgnoredKey : yes).map((key) => validateProperty(key, itemA[key], path)), aKeysLength = aKeys.length, bKeys = Object.keys(itemB).filter(atRoot ? isNotIgnoredKey : yes).map((key) => validateProperty(key, itemB[key], path)), bKeysLength = bKeys.length;\n  for (let i = 0; i < aKeysLength; i++) {\n    const key = aKeys[i];\n    key in itemB || patches.push({ op: \"unset\", path: path.concat(key) });\n  }\n  for (let i = 0; i < bKeysLength; i++) {\n    const key = bKeys[i];\n    diffItem(itemA[key], itemB[key], options, path.concat([key]), patches);\n  }\n  return patches;\n}\nfunction diffArray(itemA, itemB, options, path, patches) {\n  if (itemB.length > itemA.length && patches.push({\n    op: \"insert\",\n    after: path.concat([-1]),\n    items: itemB.slice(itemA.length).map((item, i) => nullifyUndefined(item, path, i, options))\n  }), itemB.length < itemA.length) {\n    const isSingle = itemA.length - itemB.length === 1, unsetItems = itemA.slice(itemB.length);\n    isRevisionLocked(options) || !isUniquelyKeyed(unsetItems) ? patches.push({\n      op: \"unset\",\n      path: path.concat([isSingle ? itemB.length : [itemB.length, \"\"]])\n    }) : patches.push(\n      ...unsetItems.map(\n        (item) => ({ op: \"unset\", path: path.concat({ _key: item._key }) })\n      )\n    );\n  }\n  for (let i = 0; i < itemB.length; i++)\n    if (Array.isArray(itemB[i]))\n      throw new DiffError(\"Multi-dimensional arrays not supported\", path.concat(i), itemB[i]);\n  const overlapping = Math.min(itemA.length, itemB.length), segmentA = itemA.slice(0, overlapping), segmentB = itemB.slice(0, overlapping);\n  return isUniquelyKeyed(segmentA) && isUniquelyKeyed(segmentB) ? diffArrayByKey(segmentA, segmentB, options, path, patches) : diffArrayByIndex(segmentA, segmentB, options, path, patches);\n}\nfunction diffArrayByIndex(itemA, itemB, options, path, patches) {\n  for (let i = 0; i < itemA.length; i++)\n    diffItem(\n      itemA[i],\n      nullifyUndefined(itemB[i], path, i, options),\n      options,\n      path.concat(i),\n      patches\n    );\n  return patches;\n}\nfunction diffArrayByKey(itemA, itemB, options, path, patches) {\n  const keyedA = indexByKey(itemA), keyedB = indexByKey(itemB);\n  if (!arrayIsEqual(keyedA.keys, keyedB.keys))\n    return diffArrayByIndex(itemA, itemB, options, path, patches);\n  for (let i = 0; i < keyedB.keys.length; i++) {\n    const key = keyedB.keys[i], valueA = keyedA.index[key], valueB = nullifyUndefined(keyedB.index[key], path, i, options);\n    diffItem(valueA, valueB, options, path.concat({ _key: key }), patches);\n  }\n  return patches;\n}\nfunction getDiffMatchPatch(itemA, itemB, options, path) {\n  const { enabled, lengthThresholdRelative, lengthThresholdAbsolute } = options.diffMatchPatch, segment = path[path.length - 1];\n  if (!enabled || // Don't use for anything but strings\n  typeof itemA != \"string\" || typeof itemB != \"string\" || // Don't use for `_key`, `_ref` etc\n  typeof segment == \"string\" && segment[0] === \"_\" || // Don't use on short strings\n  itemB.length < lengthThresholdAbsolute)\n    return;\n  let strPatch = \"\";\n  try {\n    const patch = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__.makeDiff)(itemA, itemB), diff = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__.cleanupEfficiency)(patch);\n    strPatch = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__.stringifyPatches)((0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__.makePatches)(diff));\n  } catch {\n    return;\n  }\n  return strPatch.length > itemB.length * lengthThresholdRelative ? void 0 : { op: \"diffMatchPatch\", path, value: strPatch };\n}\nfunction diffPrimitive(itemA, itemB, options, path, patches) {\n  const dmp = getDiffMatchPatch(itemA, itemB, options, path);\n  return patches.push(\n    dmp || {\n      op: \"set\",\n      path,\n      value: itemB\n    }\n  ), patches;\n}\nfunction isNotIgnoredKey(key) {\n  return ignoredKeys.indexOf(key) === -1;\n}\nfunction serializePatches(patches, options) {\n  if (patches.length === 0)\n    return [];\n  const { id, ifRevisionID } = options, set = patches.filter((patch) => patch.op === \"set\"), unset = patches.filter((patch) => patch.op === \"unset\"), insert = patches.filter((patch) => patch.op === \"insert\"), dmp = patches.filter((patch) => patch.op === \"diffMatchPatch\"), withSet = set.length > 0 && set.reduce(\n    (patch, item) => {\n      const path = pathToString(item.path);\n      return patch.set[path] = item.value, patch;\n    },\n    { id, set: {} }\n  ), withUnset = unset.length > 0 && unset.reduce(\n    (patch, item) => {\n      const path = pathToString(item.path);\n      return patch.unset.push(path), patch;\n    },\n    { id, unset: [] }\n  ), withInsert = insert.reduce((acc, item) => {\n    const after = pathToString(item.after);\n    return acc.concat({ id, insert: { after, items: item.items } });\n  }, []), withDmp = dmp.length > 0 && dmp.reduce(\n    (patch, item) => {\n      const path = pathToString(item.path);\n      return patch.diffMatchPatch[path] = item.value, patch;\n    },\n    { id, diffMatchPatch: {} }\n  );\n  return [withUnset, withSet, withDmp, ...withInsert].filter(\n    (item) => item !== !1\n  ).map((patch, i) => ({\n    patch: ifRevisionID && i === 0 ? { ...patch, ifRevisionID } : patch\n  }));\n}\nfunction isUniquelyKeyed(arr) {\n  const keys = [];\n  for (let i = 0; i < arr.length; i++) {\n    const key = getKey(arr[i]);\n    if (!key || keys.indexOf(key) !== -1)\n      return !1;\n    keys.push(key);\n  }\n  return !0;\n}\nfunction getKey(obj) {\n  return typeof obj == \"object\" && obj !== null && obj._key;\n}\nfunction indexByKey(arr) {\n  return arr.reduce(\n    (acc, item) => (acc.keys.push(item._key), acc.index[item._key] = item, acc),\n    { keys: [], index: {} }\n  );\n}\nfunction arrayIsEqual(itemA, itemB) {\n  return itemA.length === itemB.length && itemA.every((item, i) => itemB[i] === item);\n}\nfunction nullifyUndefined(item, path, index, options) {\n  if (typeof item < \"u\")\n    return item;\n  if (!options.hideWarnings) {\n    const serializedPath = pathToString(path.concat(index));\n    console.warn(`undefined value in array converted to null (at '${serializedPath}')`);\n  }\n  return null;\n}\nfunction isRevisionLocked(options) {\n  return !!options.ifRevisionID;\n}\nfunction yes(_) {\n  return !0;\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2FuaXR5LWRpZmYtcGF0Y2gvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXNHO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLE9BQU8sR0FBRyxrQkFBa0I7QUFDNUM7QUFDQSxnQkFBZ0IsT0FBTyxVQUFVLGFBQWE7QUFDOUM7QUFDQSxnQkFBZ0IsT0FBTyxHQUFHLFFBQVE7QUFDbEM7QUFDQSxnQkFBZ0IsT0FBTyxJQUFJLFFBQVE7QUFDbkM7QUFDQSxnQkFBZ0IsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFFBQVE7QUFDdEQsaURBQWlELFFBQVE7QUFDekQsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxTQUFTLE9BQU8sZUFBZTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLGFBQWEsS0FBSyxZQUFZO0FBQy9GO0FBQ0Esd0NBQXdDLDBEQUEwRDtBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsK0JBQStCO0FBQ3pEO0FBQ0EsMEJBQTBCLG1CQUFtQjtBQUM3QztBQUNBLDJGQUEyRiwrQkFBK0I7QUFDMUg7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGlCQUFpQjtBQUNuQztBQUNBLG1DQUFtQyxxQ0FBcUM7QUFDeEU7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EscUJBQXFCLGlDQUFpQyxpQkFBaUIsR0FBRztBQUMxRTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isa0JBQWtCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isd0JBQXdCO0FBQzFDO0FBQ0Esb0RBQW9ELFdBQVc7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLDREQUE0RDtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixrRUFBUSx1QkFBdUIsMkVBQWlCO0FBQ2xFLGVBQWUsMEVBQWdCLENBQUMscUVBQVc7QUFDM0MsSUFBSTtBQUNKO0FBQ0E7QUFDQSwrRUFBK0U7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsbUJBQW1CO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsTUFBTTtBQUNOO0FBQ0E7QUFDQSx3QkFBd0IsY0FBYyw0QkFBNEI7QUFDbEUsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMseUJBQXlCO0FBQ2hFLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FLGVBQWU7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0U7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3NpdGUvLi9ub2RlX21vZHVsZXMvc2FuaXR5LWRpZmYtcGF0Y2gvZGlzdC9pbmRleC5qcz9jZmNmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1ha2VEaWZmLCBjbGVhbnVwRWZmaWNpZW5jeSwgc3RyaW5naWZ5UGF0Y2hlcywgbWFrZVBhdGNoZXMgfSBmcm9tIFwiQHNhbml0eS9kaWZmLW1hdGNoLXBhdGNoXCI7XG5jb25zdCBJU19ET1RUQUJMRV9SRSA9IC9eW0EtWmEtel9dW0EtWmEtejAtOV9dKiQvO1xuZnVuY3Rpb24gcGF0aFRvU3RyaW5nKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGgucmVkdWNlKCh0YXJnZXQsIHNlZ21lbnQsIGkpID0+IHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzZWdtZW50KSlcbiAgICAgIHJldHVybiBgJHt0YXJnZXR9WyR7c2VnbWVudC5qb2luKFwiOlwiKX1dYDtcbiAgICBpZiAoaXNLZXllZE9iamVjdChzZWdtZW50KSlcbiAgICAgIHJldHVybiBgJHt0YXJnZXR9W19rZXk9PVwiJHtzZWdtZW50Ll9rZXl9XCJdYDtcbiAgICBpZiAodHlwZW9mIHNlZ21lbnQgPT0gXCJudW1iZXJcIilcbiAgICAgIHJldHVybiBgJHt0YXJnZXR9WyR7c2VnbWVudH1dYDtcbiAgICBpZiAodHlwZW9mIHNlZ21lbnQgPT0gXCJzdHJpbmdcIiAmJiAhSVNfRE9UVEFCTEVfUkUudGVzdChzZWdtZW50KSlcbiAgICAgIHJldHVybiBgJHt0YXJnZXR9Wycke3NlZ21lbnR9J11gO1xuICAgIGlmICh0eXBlb2Ygc2VnbWVudCA9PSBcInN0cmluZ1wiKVxuICAgICAgcmV0dXJuIGAke3RhcmdldH0ke2kgPT09IDAgPyBcIlwiIDogXCIuXCJ9JHtzZWdtZW50fWA7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBwYXRoIHNlZ21lbnQgXCIke3NlZ21lbnR9XCJgKTtcbiAgfSwgXCJcIik7XG59XG5mdW5jdGlvbiBpc0tleWVkT2JqZWN0KG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iaiA9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmouX2tleSA9PSBcInN0cmluZ1wiO1xufVxuY2xhc3MgRGlmZkVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBwYXRoO1xuICB2YWx1ZTtcbiAgc2VyaWFsaXplZFBhdGg7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHBhdGgsIHZhbHVlKSB7XG4gICAgY29uc3Qgc2VyaWFsaXplZFBhdGggPSBwYXRoVG9TdHJpbmcocGF0aCk7XG4gICAgc3VwZXIoYCR7bWVzc2FnZX0gKGF0ICcke3NlcmlhbGl6ZWRQYXRofScpYCksIHRoaXMucGF0aCA9IHBhdGgsIHRoaXMuc2VyaWFsaXplZFBhdGggPSBzZXJpYWxpemVkUGF0aCwgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB9XG59XG5jb25zdCBpZFBhdHRlcm4gPSAvXlthLXowLTldW2EtejAtOV8uLV0rJC9pLCBwcm9wUGF0dGVybiA9IC9eW2EtekEtWl9dW2EtekEtWjAtOV8tXSokLywgcHJvcFN0YXJ0UGF0dGVybiA9IC9eW2Etel9dL2k7XG5mdW5jdGlvbiB2YWxpZGF0ZVByb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSwgcGF0aCkge1xuICBpZiAoIXByb3BTdGFydFBhdHRlcm4udGVzdChwcm9wZXJ0eSkpXG4gICAgdGhyb3cgbmV3IERpZmZFcnJvcihcIktleXMgbXVzdCBzdGFydCB3aXRoIGEgbGV0dGVyIChhLXopXCIsIHBhdGguY29uY2F0KHByb3BlcnR5KSwgdmFsdWUpO1xuICBpZiAoIXByb3BQYXR0ZXJuLnRlc3QocHJvcGVydHkpKVxuICAgIHRocm93IG5ldyBEaWZmRXJyb3IoXG4gICAgICBcIktleXMgY2FuIG9ubHkgY29udGFpbiBsZXR0ZXJzLCBudW1iZXJzIGFuZCB1bmRlcnNjb3Jlc1wiLFxuICAgICAgcGF0aC5jb25jYXQocHJvcGVydHkpLFxuICAgICAgdmFsdWVcbiAgICApO1xuICBpZiAocHJvcGVydHkgPT09IFwiX2tleVwiIHx8IHByb3BlcnR5ID09PSBcIl9yZWZcIiB8fCBwcm9wZXJ0eSA9PT0gXCJfdHlwZVwiKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSBcInN0cmluZ1wiKVxuICAgICAgdGhyb3cgbmV3IERpZmZFcnJvcihcIktleXMgbXVzdCBiZSBzdHJpbmdzXCIsIHBhdGguY29uY2F0KHByb3BlcnR5KSwgdmFsdWUpO1xuICAgIGlmICghaWRQYXR0ZXJuLnRlc3QodmFsdWUpKVxuICAgICAgdGhyb3cgbmV3IERpZmZFcnJvcihcIkludmFsaWQga2V5IC0gdXNlIGxlc3MgZXhvdGljIGNoYXJhY3RlcnNcIiwgcGF0aC5jb25jYXQocHJvcGVydHkpLCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHByb3BlcnR5O1xufVxuY29uc3QgaWdub3JlZEtleXMgPSBbXCJfaWRcIiwgXCJfdHlwZVwiLCBcIl9jcmVhdGVkQXRcIiwgXCJfdXBkYXRlZEF0XCIsIFwiX3JldlwiXSwgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIGhpZGVXYXJuaW5nczogITEsXG4gIGRpZmZNYXRjaFBhdGNoOiB7XG4gICAgZW5hYmxlZDogITAsXG4gICAgLy8gT25seSB1c2UgZGlmZi1tYXRjaC1wYXRjaCBpZiB0YXJnZXQgc3RyaW5nIGlzIGxvbmdlciB0aGFuIHRoaXMgdGhyZXNob2xkXG4gICAgbGVuZ3RoVGhyZXNob2xkQWJzb2x1dGU6IDMwLFxuICAgIC8vIE9ubHkgdXNlIGdlbmVyYXRlZCBkaWZmLW1hdGNoLXBhdGNoIGlmIHRoZSBwYXRjaCBsZW5ndGggaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gICAgLy8gKHRhcmdldFN0cmluZyAqIHJlbGF0aXZlKS4gRXhhbXBsZTogQSAxMDAgY2hhcmFjdGVyIHRhcmdldCB3aXRoIGEgcmVsYXRpdmUgZmFjdG9yXG4gICAgLy8gb2YgMS4yIHdpbGwgYWxsb3cgYSAxMjAgY2hhcmFjdGVyIGRpZmYtbWF0Y2gtcGF0Y2guIElmIGxhcmdlciB0aGFuIHRoaXMgbnVtYmVyLFxuICAgIC8vIGl0IHdpbGwgZmFsbCBiYWNrIHRvIGEgcmVndWxhciBgc2V0YCBwYXRjaC5cbiAgICBsZW5ndGhUaHJlc2hvbGRSZWxhdGl2ZTogMS4yXG4gIH1cbn07XG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMob3B0aW9ucykge1xuICByZXR1cm4ge1xuICAgIC4uLmRlZmF1bHRPcHRpb25zLFxuICAgIC4uLm9wdGlvbnMsXG4gICAgZGlmZk1hdGNoUGF0Y2g6IHsgLi4uZGVmYXVsdE9wdGlvbnMuZGlmZk1hdGNoUGF0Y2gsIC4uLm9wdGlvbnMuZGlmZk1hdGNoUGF0Y2ggfHwge30gfVxuICB9O1xufVxuZnVuY3Rpb24gZGlmZlBhdGNoKGl0ZW1BLCBpdGVtQiwgb3B0cykge1xuICBjb25zdCBvcHRpb25zID0gbWVyZ2VPcHRpb25zKG9wdHMgfHwge30pLCBpZCA9IG9wdGlvbnMuaWQgfHwgaXRlbUEuX2lkID09PSBpdGVtQi5faWQgJiYgaXRlbUEuX2lkLCByZXZpc2lvbkxvY2tlZCA9IG9wdGlvbnMuaWZSZXZpc2lvbklELCBpZlJldmlzaW9uSUQgPSB0eXBlb2YgcmV2aXNpb25Mb2NrZWQgPT0gXCJib29sZWFuXCIgPyBpdGVtQS5fcmV2IDogcmV2aXNpb25Mb2NrZWQsIGJhc2VQYXRoID0gb3B0aW9ucy5iYXNlUGF0aCB8fCBbXTtcbiAgaWYgKCFpZClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIl9pZCBvbiBpdGVtQSBhbmQgaXRlbUIgbm90IHByZXNlbnQgb3IgZGlmZmVycywgc3BlY2lmeSBkb2N1bWVudCBpZCB0aGUgbXV0YXRpb25zIHNob3VsZCBiZSBhcHBsaWVkIHRvXCJcbiAgICApO1xuICBpZiAocmV2aXNpb25Mb2NrZWQgPT09ICEwICYmICFpZlJldmlzaW9uSUQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJgaWZSZXZpc2lvbklEYCBpcyBzZXQgdG8gYHRydWVgLCBidXQgbm8gYF9yZXZgIHdhcyBwYXNzZWQgaW4gaXRlbSBBLiBFaXRoZXIgZXhwbGljaXRseSBzZXQgYGlmUmV2aXNpb25JRGAgdG8gYSByZXZpc2lvbiwgb3IgcGFzcyBgX3JldmAgYXMgcGFydCBvZiBpdGVtIEEuXCJcbiAgICApO1xuICBpZiAoYmFzZVBhdGgubGVuZ3RoID09PSAwICYmIGl0ZW1BLl90eXBlICE9PSBpdGVtQi5fdHlwZSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoYF90eXBlIGlzIGltbXV0YWJsZSBhbmQgY2Fubm90IGJlIGNoYW5nZWQgKCR7aXRlbUEuX3R5cGV9ID0+ICR7aXRlbUIuX3R5cGV9KWApO1xuICBjb25zdCBvcGVyYXRpb25zID0gZGlmZkl0ZW0oaXRlbUEsIGl0ZW1CLCBvcHRpb25zLCBiYXNlUGF0aCwgW10pO1xuICByZXR1cm4gc2VyaWFsaXplUGF0Y2hlcyhvcGVyYXRpb25zLCB7IGlkLCBpZlJldmlzaW9uSUQ6IHJldmlzaW9uTG9ja2VkID8gaWZSZXZpc2lvbklEIDogdm9pZCAwIH0pO1xufVxuZnVuY3Rpb24gZGlmZkl0ZW0oaXRlbUEsIGl0ZW1CLCBvcHRzID0gZGVmYXVsdE9wdGlvbnMsIHBhdGggPSBbXSwgcGF0Y2hlcyA9IFtdKSB7XG4gIGlmIChpdGVtQSA9PT0gaXRlbUIpXG4gICAgcmV0dXJuIHBhdGNoZXM7XG4gIGNvbnN0IGFUeXBlID0gQXJyYXkuaXNBcnJheShpdGVtQSkgPyBcImFycmF5XCIgOiB0eXBlb2YgaXRlbUEsIGJUeXBlID0gQXJyYXkuaXNBcnJheShpdGVtQikgPyBcImFycmF5XCIgOiB0eXBlb2YgaXRlbUIsIGFJc1VuZGVmaW5lZCA9IGFUeXBlID09PSBcInVuZGVmaW5lZFwiLCBiSXNVbmRlZmluZWQgPSBiVHlwZSA9PT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKGFJc1VuZGVmaW5lZCAmJiAhYklzVW5kZWZpbmVkKVxuICAgIHJldHVybiBwYXRjaGVzLnB1c2goeyBvcDogXCJzZXRcIiwgcGF0aCwgdmFsdWU6IGl0ZW1CIH0pLCBwYXRjaGVzO1xuICBpZiAoIWFJc1VuZGVmaW5lZCAmJiBiSXNVbmRlZmluZWQpXG4gICAgcmV0dXJuIHBhdGNoZXMucHVzaCh7IG9wOiBcInVuc2V0XCIsIHBhdGggfSksIHBhdGNoZXM7XG4gIGNvbnN0IG9wdGlvbnMgPSBtZXJnZU9wdGlvbnMob3B0cyksIGRhdGFUeXBlID0gYUlzVW5kZWZpbmVkID8gYlR5cGUgOiBhVHlwZTtcbiAgcmV0dXJuIGRhdGFUeXBlID09PSBcIm9iamVjdFwiIHx8IGRhdGFUeXBlID09PSBcImFycmF5XCIgPyBhVHlwZSAhPT0gYlR5cGUgPyAocGF0Y2hlcy5wdXNoKHsgb3A6IFwic2V0XCIsIHBhdGgsIHZhbHVlOiBpdGVtQiB9KSwgcGF0Y2hlcykgOiBkYXRhVHlwZSA9PT0gXCJhcnJheVwiID8gZGlmZkFycmF5KGl0ZW1BLCBpdGVtQiwgb3B0aW9ucywgcGF0aCwgcGF0Y2hlcykgOiBkaWZmT2JqZWN0KGl0ZW1BLCBpdGVtQiwgb3B0aW9ucywgcGF0aCwgcGF0Y2hlcykgOiBkaWZmUHJpbWl0aXZlKGl0ZW1BLCBpdGVtQiwgb3B0aW9ucywgcGF0aCwgcGF0Y2hlcyk7XG59XG5mdW5jdGlvbiBkaWZmT2JqZWN0KGl0ZW1BLCBpdGVtQiwgb3B0aW9ucywgcGF0aCwgcGF0Y2hlcykge1xuICBjb25zdCBhdFJvb3QgPSBwYXRoLmxlbmd0aCA9PT0gMCwgYUtleXMgPSBPYmplY3Qua2V5cyhpdGVtQSkuZmlsdGVyKGF0Um9vdCA/IGlzTm90SWdub3JlZEtleSA6IHllcykubWFwKChrZXkpID0+IHZhbGlkYXRlUHJvcGVydHkoa2V5LCBpdGVtQVtrZXldLCBwYXRoKSksIGFLZXlzTGVuZ3RoID0gYUtleXMubGVuZ3RoLCBiS2V5cyA9IE9iamVjdC5rZXlzKGl0ZW1CKS5maWx0ZXIoYXRSb290ID8gaXNOb3RJZ25vcmVkS2V5IDogeWVzKS5tYXAoKGtleSkgPT4gdmFsaWRhdGVQcm9wZXJ0eShrZXksIGl0ZW1CW2tleV0sIHBhdGgpKSwgYktleXNMZW5ndGggPSBiS2V5cy5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYUtleXNMZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGtleSA9IGFLZXlzW2ldO1xuICAgIGtleSBpbiBpdGVtQiB8fCBwYXRjaGVzLnB1c2goeyBvcDogXCJ1bnNldFwiLCBwYXRoOiBwYXRoLmNvbmNhdChrZXkpIH0pO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYktleXNMZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGtleSA9IGJLZXlzW2ldO1xuICAgIGRpZmZJdGVtKGl0ZW1BW2tleV0sIGl0ZW1CW2tleV0sIG9wdGlvbnMsIHBhdGguY29uY2F0KFtrZXldKSwgcGF0Y2hlcyk7XG4gIH1cbiAgcmV0dXJuIHBhdGNoZXM7XG59XG5mdW5jdGlvbiBkaWZmQXJyYXkoaXRlbUEsIGl0ZW1CLCBvcHRpb25zLCBwYXRoLCBwYXRjaGVzKSB7XG4gIGlmIChpdGVtQi5sZW5ndGggPiBpdGVtQS5sZW5ndGggJiYgcGF0Y2hlcy5wdXNoKHtcbiAgICBvcDogXCJpbnNlcnRcIixcbiAgICBhZnRlcjogcGF0aC5jb25jYXQoWy0xXSksXG4gICAgaXRlbXM6IGl0ZW1CLnNsaWNlKGl0ZW1BLmxlbmd0aCkubWFwKChpdGVtLCBpKSA9PiBudWxsaWZ5VW5kZWZpbmVkKGl0ZW0sIHBhdGgsIGksIG9wdGlvbnMpKVxuICB9KSwgaXRlbUIubGVuZ3RoIDwgaXRlbUEubGVuZ3RoKSB7XG4gICAgY29uc3QgaXNTaW5nbGUgPSBpdGVtQS5sZW5ndGggLSBpdGVtQi5sZW5ndGggPT09IDEsIHVuc2V0SXRlbXMgPSBpdGVtQS5zbGljZShpdGVtQi5sZW5ndGgpO1xuICAgIGlzUmV2aXNpb25Mb2NrZWQob3B0aW9ucykgfHwgIWlzVW5pcXVlbHlLZXllZCh1bnNldEl0ZW1zKSA/IHBhdGNoZXMucHVzaCh7XG4gICAgICBvcDogXCJ1bnNldFwiLFxuICAgICAgcGF0aDogcGF0aC5jb25jYXQoW2lzU2luZ2xlID8gaXRlbUIubGVuZ3RoIDogW2l0ZW1CLmxlbmd0aCwgXCJcIl1dKVxuICAgIH0pIDogcGF0Y2hlcy5wdXNoKFxuICAgICAgLi4udW5zZXRJdGVtcy5tYXAoXG4gICAgICAgIChpdGVtKSA9PiAoeyBvcDogXCJ1bnNldFwiLCBwYXRoOiBwYXRoLmNvbmNhdCh7IF9rZXk6IGl0ZW0uX2tleSB9KSB9KVxuICAgICAgKVxuICAgICk7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtQi5sZW5ndGg7IGkrKylcbiAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtQltpXSkpXG4gICAgICB0aHJvdyBuZXcgRGlmZkVycm9yKFwiTXVsdGktZGltZW5zaW9uYWwgYXJyYXlzIG5vdCBzdXBwb3J0ZWRcIiwgcGF0aC5jb25jYXQoaSksIGl0ZW1CW2ldKTtcbiAgY29uc3Qgb3ZlcmxhcHBpbmcgPSBNYXRoLm1pbihpdGVtQS5sZW5ndGgsIGl0ZW1CLmxlbmd0aCksIHNlZ21lbnRBID0gaXRlbUEuc2xpY2UoMCwgb3ZlcmxhcHBpbmcpLCBzZWdtZW50QiA9IGl0ZW1CLnNsaWNlKDAsIG92ZXJsYXBwaW5nKTtcbiAgcmV0dXJuIGlzVW5pcXVlbHlLZXllZChzZWdtZW50QSkgJiYgaXNVbmlxdWVseUtleWVkKHNlZ21lbnRCKSA/IGRpZmZBcnJheUJ5S2V5KHNlZ21lbnRBLCBzZWdtZW50Qiwgb3B0aW9ucywgcGF0aCwgcGF0Y2hlcykgOiBkaWZmQXJyYXlCeUluZGV4KHNlZ21lbnRBLCBzZWdtZW50Qiwgb3B0aW9ucywgcGF0aCwgcGF0Y2hlcyk7XG59XG5mdW5jdGlvbiBkaWZmQXJyYXlCeUluZGV4KGl0ZW1BLCBpdGVtQiwgb3B0aW9ucywgcGF0aCwgcGF0Y2hlcykge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1BLmxlbmd0aDsgaSsrKVxuICAgIGRpZmZJdGVtKFxuICAgICAgaXRlbUFbaV0sXG4gICAgICBudWxsaWZ5VW5kZWZpbmVkKGl0ZW1CW2ldLCBwYXRoLCBpLCBvcHRpb25zKSxcbiAgICAgIG9wdGlvbnMsXG4gICAgICBwYXRoLmNvbmNhdChpKSxcbiAgICAgIHBhdGNoZXNcbiAgICApO1xuICByZXR1cm4gcGF0Y2hlcztcbn1cbmZ1bmN0aW9uIGRpZmZBcnJheUJ5S2V5KGl0ZW1BLCBpdGVtQiwgb3B0aW9ucywgcGF0aCwgcGF0Y2hlcykge1xuICBjb25zdCBrZXllZEEgPSBpbmRleEJ5S2V5KGl0ZW1BKSwga2V5ZWRCID0gaW5kZXhCeUtleShpdGVtQik7XG4gIGlmICghYXJyYXlJc0VxdWFsKGtleWVkQS5rZXlzLCBrZXllZEIua2V5cykpXG4gICAgcmV0dXJuIGRpZmZBcnJheUJ5SW5kZXgoaXRlbUEsIGl0ZW1CLCBvcHRpb25zLCBwYXRoLCBwYXRjaGVzKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXllZEIua2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGtleSA9IGtleWVkQi5rZXlzW2ldLCB2YWx1ZUEgPSBrZXllZEEuaW5kZXhba2V5XSwgdmFsdWVCID0gbnVsbGlmeVVuZGVmaW5lZChrZXllZEIuaW5kZXhba2V5XSwgcGF0aCwgaSwgb3B0aW9ucyk7XG4gICAgZGlmZkl0ZW0odmFsdWVBLCB2YWx1ZUIsIG9wdGlvbnMsIHBhdGguY29uY2F0KHsgX2tleToga2V5IH0pLCBwYXRjaGVzKTtcbiAgfVxuICByZXR1cm4gcGF0Y2hlcztcbn1cbmZ1bmN0aW9uIGdldERpZmZNYXRjaFBhdGNoKGl0ZW1BLCBpdGVtQiwgb3B0aW9ucywgcGF0aCkge1xuICBjb25zdCB7IGVuYWJsZWQsIGxlbmd0aFRocmVzaG9sZFJlbGF0aXZlLCBsZW5ndGhUaHJlc2hvbGRBYnNvbHV0ZSB9ID0gb3B0aW9ucy5kaWZmTWF0Y2hQYXRjaCwgc2VnbWVudCA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgaWYgKCFlbmFibGVkIHx8IC8vIERvbid0IHVzZSBmb3IgYW55dGhpbmcgYnV0IHN0cmluZ3NcbiAgdHlwZW9mIGl0ZW1BICE9IFwic3RyaW5nXCIgfHwgdHlwZW9mIGl0ZW1CICE9IFwic3RyaW5nXCIgfHwgLy8gRG9uJ3QgdXNlIGZvciBgX2tleWAsIGBfcmVmYCBldGNcbiAgdHlwZW9mIHNlZ21lbnQgPT0gXCJzdHJpbmdcIiAmJiBzZWdtZW50WzBdID09PSBcIl9cIiB8fCAvLyBEb24ndCB1c2Ugb24gc2hvcnQgc3RyaW5nc1xuICBpdGVtQi5sZW5ndGggPCBsZW5ndGhUaHJlc2hvbGRBYnNvbHV0ZSlcbiAgICByZXR1cm47XG4gIGxldCBzdHJQYXRjaCA9IFwiXCI7XG4gIHRyeSB7XG4gICAgY29uc3QgcGF0Y2ggPSBtYWtlRGlmZihpdGVtQSwgaXRlbUIpLCBkaWZmID0gY2xlYW51cEVmZmljaWVuY3kocGF0Y2gpO1xuICAgIHN0clBhdGNoID0gc3RyaW5naWZ5UGF0Y2hlcyhtYWtlUGF0Y2hlcyhkaWZmKSk7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybjtcbiAgfVxuICByZXR1cm4gc3RyUGF0Y2gubGVuZ3RoID4gaXRlbUIubGVuZ3RoICogbGVuZ3RoVGhyZXNob2xkUmVsYXRpdmUgPyB2b2lkIDAgOiB7IG9wOiBcImRpZmZNYXRjaFBhdGNoXCIsIHBhdGgsIHZhbHVlOiBzdHJQYXRjaCB9O1xufVxuZnVuY3Rpb24gZGlmZlByaW1pdGl2ZShpdGVtQSwgaXRlbUIsIG9wdGlvbnMsIHBhdGgsIHBhdGNoZXMpIHtcbiAgY29uc3QgZG1wID0gZ2V0RGlmZk1hdGNoUGF0Y2goaXRlbUEsIGl0ZW1CLCBvcHRpb25zLCBwYXRoKTtcbiAgcmV0dXJuIHBhdGNoZXMucHVzaChcbiAgICBkbXAgfHwge1xuICAgICAgb3A6IFwic2V0XCIsXG4gICAgICBwYXRoLFxuICAgICAgdmFsdWU6IGl0ZW1CXG4gICAgfVxuICApLCBwYXRjaGVzO1xufVxuZnVuY3Rpb24gaXNOb3RJZ25vcmVkS2V5KGtleSkge1xuICByZXR1cm4gaWdub3JlZEtleXMuaW5kZXhPZihrZXkpID09PSAtMTtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZVBhdGNoZXMocGF0Y2hlcywgb3B0aW9ucykge1xuICBpZiAocGF0Y2hlcy5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIFtdO1xuICBjb25zdCB7IGlkLCBpZlJldmlzaW9uSUQgfSA9IG9wdGlvbnMsIHNldCA9IHBhdGNoZXMuZmlsdGVyKChwYXRjaCkgPT4gcGF0Y2gub3AgPT09IFwic2V0XCIpLCB1bnNldCA9IHBhdGNoZXMuZmlsdGVyKChwYXRjaCkgPT4gcGF0Y2gub3AgPT09IFwidW5zZXRcIiksIGluc2VydCA9IHBhdGNoZXMuZmlsdGVyKChwYXRjaCkgPT4gcGF0Y2gub3AgPT09IFwiaW5zZXJ0XCIpLCBkbXAgPSBwYXRjaGVzLmZpbHRlcigocGF0Y2gpID0+IHBhdGNoLm9wID09PSBcImRpZmZNYXRjaFBhdGNoXCIpLCB3aXRoU2V0ID0gc2V0Lmxlbmd0aCA+IDAgJiYgc2V0LnJlZHVjZShcbiAgICAocGF0Y2gsIGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IHBhdGggPSBwYXRoVG9TdHJpbmcoaXRlbS5wYXRoKTtcbiAgICAgIHJldHVybiBwYXRjaC5zZXRbcGF0aF0gPSBpdGVtLnZhbHVlLCBwYXRjaDtcbiAgICB9LFxuICAgIHsgaWQsIHNldDoge30gfVxuICApLCB3aXRoVW5zZXQgPSB1bnNldC5sZW5ndGggPiAwICYmIHVuc2V0LnJlZHVjZShcbiAgICAocGF0Y2gsIGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IHBhdGggPSBwYXRoVG9TdHJpbmcoaXRlbS5wYXRoKTtcbiAgICAgIHJldHVybiBwYXRjaC51bnNldC5wdXNoKHBhdGgpLCBwYXRjaDtcbiAgICB9LFxuICAgIHsgaWQsIHVuc2V0OiBbXSB9XG4gICksIHdpdGhJbnNlcnQgPSBpbnNlcnQucmVkdWNlKChhY2MsIGl0ZW0pID0+IHtcbiAgICBjb25zdCBhZnRlciA9IHBhdGhUb1N0cmluZyhpdGVtLmFmdGVyKTtcbiAgICByZXR1cm4gYWNjLmNvbmNhdCh7IGlkLCBpbnNlcnQ6IHsgYWZ0ZXIsIGl0ZW1zOiBpdGVtLml0ZW1zIH0gfSk7XG4gIH0sIFtdKSwgd2l0aERtcCA9IGRtcC5sZW5ndGggPiAwICYmIGRtcC5yZWR1Y2UoXG4gICAgKHBhdGNoLCBpdGVtKSA9PiB7XG4gICAgICBjb25zdCBwYXRoID0gcGF0aFRvU3RyaW5nKGl0ZW0ucGF0aCk7XG4gICAgICByZXR1cm4gcGF0Y2guZGlmZk1hdGNoUGF0Y2hbcGF0aF0gPSBpdGVtLnZhbHVlLCBwYXRjaDtcbiAgICB9LFxuICAgIHsgaWQsIGRpZmZNYXRjaFBhdGNoOiB7fSB9XG4gICk7XG4gIHJldHVybiBbd2l0aFVuc2V0LCB3aXRoU2V0LCB3aXRoRG1wLCAuLi53aXRoSW5zZXJ0XS5maWx0ZXIoXG4gICAgKGl0ZW0pID0+IGl0ZW0gIT09ICExXG4gICkubWFwKChwYXRjaCwgaSkgPT4gKHtcbiAgICBwYXRjaDogaWZSZXZpc2lvbklEICYmIGkgPT09IDAgPyB7IC4uLnBhdGNoLCBpZlJldmlzaW9uSUQgfSA6IHBhdGNoXG4gIH0pKTtcbn1cbmZ1bmN0aW9uIGlzVW5pcXVlbHlLZXllZChhcnIpIHtcbiAgY29uc3Qga2V5cyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGtleSA9IGdldEtleShhcnJbaV0pO1xuICAgIGlmICgha2V5IHx8IGtleXMuaW5kZXhPZihrZXkpICE9PSAtMSlcbiAgICAgIHJldHVybiAhMTtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gITA7XG59XG5mdW5jdGlvbiBnZXRLZXkob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqID09IFwib2JqZWN0XCIgJiYgb2JqICE9PSBudWxsICYmIG9iai5fa2V5O1xufVxuZnVuY3Rpb24gaW5kZXhCeUtleShhcnIpIHtcbiAgcmV0dXJuIGFyci5yZWR1Y2UoXG4gICAgKGFjYywgaXRlbSkgPT4gKGFjYy5rZXlzLnB1c2goaXRlbS5fa2V5KSwgYWNjLmluZGV4W2l0ZW0uX2tleV0gPSBpdGVtLCBhY2MpLFxuICAgIHsga2V5czogW10sIGluZGV4OiB7fSB9XG4gICk7XG59XG5mdW5jdGlvbiBhcnJheUlzRXF1YWwoaXRlbUEsIGl0ZW1CKSB7XG4gIHJldHVybiBpdGVtQS5sZW5ndGggPT09IGl0ZW1CLmxlbmd0aCAmJiBpdGVtQS5ldmVyeSgoaXRlbSwgaSkgPT4gaXRlbUJbaV0gPT09IGl0ZW0pO1xufVxuZnVuY3Rpb24gbnVsbGlmeVVuZGVmaW5lZChpdGVtLCBwYXRoLCBpbmRleCwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIGl0ZW0gPCBcInVcIilcbiAgICByZXR1cm4gaXRlbTtcbiAgaWYgKCFvcHRpb25zLmhpZGVXYXJuaW5ncykge1xuICAgIGNvbnN0IHNlcmlhbGl6ZWRQYXRoID0gcGF0aFRvU3RyaW5nKHBhdGguY29uY2F0KGluZGV4KSk7XG4gICAgY29uc29sZS53YXJuKGB1bmRlZmluZWQgdmFsdWUgaW4gYXJyYXkgY29udmVydGVkIHRvIG51bGwgKGF0ICcke3NlcmlhbGl6ZWRQYXRofScpYCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBpc1JldmlzaW9uTG9ja2VkKG9wdGlvbnMpIHtcbiAgcmV0dXJuICEhb3B0aW9ucy5pZlJldmlzaW9uSUQ7XG59XG5mdW5jdGlvbiB5ZXMoXykge1xuICByZXR1cm4gITA7XG59XG5leHBvcnQge1xuICBEaWZmRXJyb3IsXG4gIGRpZmZJdGVtLFxuICBkaWZmUGF0Y2hcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sanity-diff-patch/dist/index.js\n");

/***/ })

};
;